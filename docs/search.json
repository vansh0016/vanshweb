[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "code.html",
    "href": "code.html",
    "title": "Codes",
    "section": "",
    "text": "library(ggplot2)     # Loads ggplot2\nlibrary(tidyverse)   # Loads tidyverse\nlibrary(plotly)      # Loads plotly\nlibrary(scales)      # Loads scales\n\nworld_population &lt;- read.csv(\"world_population.csv\")  # Reads the data into a data frame\n\nworld_population &lt;- world_population %&gt;%\n  rename(country = `Country.Territory`,  # Renames 'Country.Territory' to 'country'\n         capital = `Capital`,              # Renames 'Capital' to 'capital'\n         population_2020 = `X2020.Population`)  # Renames 'X2020.Population' to 'population_2020'\n\nplot &lt;- plot_ly(\n  data = world_population,  # Uses the cleaned world_population dataset\n  type = 'choropleth',      # Specifies the type of plot as a choropleth map\n  locations = world_population$CCA3,  # Assigns country codes (CCA3) for geographical locations\n  z = world_population$population_2020,  # Sets the population values for color intensity\n  text = paste(\"Country:\", world_population$country,  # Creates hover text to show detailed information\n               \"&lt;br&gt;Capital:\", world_population$capital,\n               \"&lt;br&gt;Population:\", world_population$population_2020,\n               \"&lt;br&gt;Population Percentage:\", world_population$World.Population.Percentage),\n  hoverinfo = \"text\",  # Displays the detailed hover text when the user hovers over a country\n  colorscale = list(c(0, \"lightblue\"), c(1, \"darkblue\")),  # Defines a color scale from light blue to dark blue\n  colorbar = list(title = \"Population\"),  # Labels the color bar indicating the population scale\n  marker = list(line = list(color = 'black', width = 0.5))  # Sets the border color and width for each country\n) %&gt;%\nlayout(\n    title = 'World Population',  # Sets the main title of the plot\n    geo = list(\n      showframe = FALSE,  # Hides the frame around the map for a cleaner look\n      showcoastlines = TRUE,  # Enables coastlines to help delineate country borders\n      coastlinecolor = 'Black',  # Sets the color of the coastlines to black\n      projection = list(type = 'Mercator'),  # Uses Mercator projection for accurate representation of landmasses\n      showland = TRUE,  # Ensures that land areas are displayed on the map\n      landcolor = 'lightgrey',  # Sets the color of land areas to light grey for contrast\n      subunitcolor = 'black'  # Sets the color of subunit borders (countries) to black for visibility\n    )\n)\n\nplot  # Displays the plot\n\n\n\n\n\nworld_population2 &lt;- read.csv(\"world_population.csv\")  # Loads the dataset\n\nlong_population_data &lt;- world_population2 %&gt;%\n  select(`Country.Territory`,  # Selects the country territory column\n         `X2022.Population`,   # Selects the population for 2022\n         `X2020.Population`,   # Selects the population for 2020\n         `X2015.Population`,   # Selects the population for 2015\n         `X2010.Population`,   # Selects the population for 2010\n         `X2000.Population`,   # Selects the population for 2000\n         `X1990.Population`,   # Selects the population for 1990\n         `X1980.Population`,   # Selects the population for 1980\n         `X1970.Population`) %&gt;%  # Selects the population for 1970\n  pivot_longer(cols = starts_with(\"X\"),  # Reshapes the data to long format for years\n               names_to = \"Year\",  # Sets the name for the year column\n               values_to = \"Population\") %&gt;%  # Sets the name for the population column\n  mutate(Year = gsub(\"X\", \"\", Year),  # Removes \"X\" from the year values\n         Year = gsub(\"\\\\.Population\", \"\", Year))  # Removes \".Population\" from the year values\n\ntop_ten_countries &lt;- world_population2 %&gt;%\n  arrange(desc(`X2020.Population`)) %&gt;%  # Arranges the countries in descending order by 2020 population\n  head(10) %&gt;%  # Selects the top ten countries\n  pull(`Country.Territory`)  # Extracts the country names\n\nfiltered_data &lt;- long_population_data %&gt;%\n  filter(`Country.Territory` %in% top_ten_countries)  # Filters data for the top ten countries\n\nplots_list &lt;- list()  # Creates an empty list to hold plot objects\n\nfor (country in unique(filtered_data$`Country.Territory`)) {\n  country_data &lt;- filtered_data %&gt;% filter(`Country.Territory` == country)  # Filter data for the current country\n\n  plot &lt;- plot_ly(data = country_data,\n                  x = ~Year,  # Sets the x-axis to the Year\n                  y = ~Population,  # Sets the y-axis to Population\n                  type = 'scatter',  # Specifies the plot type as scatter\n                  mode = 'lines+markers',  # Uses lines and markers for the plot\n                  name = country,  # Labels the plot with the country's name\n                  text = ~paste(\"Population:\", Population),  # Creates hover text showing population\n                  hoverinfo = 'text') %&gt;%  # Ensures hover info displays the text\n    layout(title = country,  # Sets the title of the plot to the country's name\n           xaxis = list(title = \"Year\"),  # Labels the x-axis\n           yaxis = list(title = \"Population\"),  # Labels the y-axis\n           showlegend = FALSE)  # Disables the legend for individual country plots\n\n  plots_list[[country]] &lt;- plot  # Adds the plot to the list using the country name as the key\n}\n\ncombined_plot &lt;- subplot(plots_list, nrows = 2, shareX = TRUE, titleX = TRUE, titleY = TRUE) %&gt;%\n  layout(title = \"Change in Population of Top 10 Countries Over Years\",  # Sets the main title for the combined plot\n         xaxis = list(title = \"Year\"),  # Labels the x-axis for the combined plot\n         yaxis = list(title = \"Population\"),  # Labels the y-axis for the combined plot\n         showlegend = TRUE)  # Enables the legend for the combined plot\n\ncombined_plot  # Displays the final combined plot of population changes"
  },
  {
    "objectID": "code.html#population-in-one-chart",
    "href": "code.html#population-in-one-chart",
    "title": "Codes",
    "section": "",
    "text": "library(ggplot2)     # Loads ggplot2\nlibrary(tidyverse)   # Loads tidyverse\nlibrary(plotly)      # Loads plotly\nlibrary(scales)      # Loads scales\n\nworld_population &lt;- read.csv(\"world_population.csv\")  # Reads the data into a data frame\n\nworld_population &lt;- world_population %&gt;%\n  rename(country = `Country.Territory`,  # Renames 'Country.Territory' to 'country'\n         capital = `Capital`,              # Renames 'Capital' to 'capital'\n         population_2020 = `X2020.Population`)  # Renames 'X2020.Population' to 'population_2020'\n\nplot &lt;- plot_ly(\n  data = world_population,  # Uses the cleaned world_population dataset\n  type = 'choropleth',      # Specifies the type of plot as a choropleth map\n  locations = world_population$CCA3,  # Assigns country codes (CCA3) for geographical locations\n  z = world_population$population_2020,  # Sets the population values for color intensity\n  text = paste(\"Country:\", world_population$country,  # Creates hover text to show detailed information\n               \"&lt;br&gt;Capital:\", world_population$capital,\n               \"&lt;br&gt;Population:\", world_population$population_2020,\n               \"&lt;br&gt;Population Percentage:\", world_population$World.Population.Percentage),\n  hoverinfo = \"text\",  # Displays the detailed hover text when the user hovers over a country\n  colorscale = list(c(0, \"lightblue\"), c(1, \"darkblue\")),  # Defines a color scale from light blue to dark blue\n  colorbar = list(title = \"Population\"),  # Labels the color bar indicating the population scale\n  marker = list(line = list(color = 'black', width = 0.5))  # Sets the border color and width for each country\n) %&gt;%\nlayout(\n    title = 'World Population',  # Sets the main title of the plot\n    geo = list(\n      showframe = FALSE,  # Hides the frame around the map for a cleaner look\n      showcoastlines = TRUE,  # Enables coastlines to help delineate country borders\n      coastlinecolor = 'Black',  # Sets the color of the coastlines to black\n      projection = list(type = 'Mercator'),  # Uses Mercator projection for accurate representation of landmasses\n      showland = TRUE,  # Ensures that land areas are displayed on the map\n      landcolor = 'lightgrey',  # Sets the color of land areas to light grey for contrast\n      subunitcolor = 'black'  # Sets the color of subunit borders (countries) to black for visibility\n    )\n)\n\nplot  # Displays the plot\n\n\n\n\n\nworld_population2 &lt;- read.csv(\"world_population.csv\")  # Loads the dataset\n\nlong_population_data &lt;- world_population2 %&gt;%\n  select(`Country.Territory`,  # Selects the country territory column\n         `X2022.Population`,   # Selects the population for 2022\n         `X2020.Population`,   # Selects the population for 2020\n         `X2015.Population`,   # Selects the population for 2015\n         `X2010.Population`,   # Selects the population for 2010\n         `X2000.Population`,   # Selects the population for 2000\n         `X1990.Population`,   # Selects the population for 1990\n         `X1980.Population`,   # Selects the population for 1980\n         `X1970.Population`) %&gt;%  # Selects the population for 1970\n  pivot_longer(cols = starts_with(\"X\"),  # Reshapes the data to long format for years\n               names_to = \"Year\",  # Sets the name for the year column\n               values_to = \"Population\") %&gt;%  # Sets the name for the population column\n  mutate(Year = gsub(\"X\", \"\", Year),  # Removes \"X\" from the year values\n         Year = gsub(\"\\\\.Population\", \"\", Year))  # Removes \".Population\" from the year values\n\ntop_ten_countries &lt;- world_population2 %&gt;%\n  arrange(desc(`X2020.Population`)) %&gt;%  # Arranges the countries in descending order by 2020 population\n  head(10) %&gt;%  # Selects the top ten countries\n  pull(`Country.Territory`)  # Extracts the country names\n\nfiltered_data &lt;- long_population_data %&gt;%\n  filter(`Country.Territory` %in% top_ten_countries)  # Filters data for the top ten countries\n\nplots_list &lt;- list()  # Creates an empty list to hold plot objects\n\nfor (country in unique(filtered_data$`Country.Territory`)) {\n  country_data &lt;- filtered_data %&gt;% filter(`Country.Territory` == country)  # Filter data for the current country\n\n  plot &lt;- plot_ly(data = country_data,\n                  x = ~Year,  # Sets the x-axis to the Year\n                  y = ~Population,  # Sets the y-axis to Population\n                  type = 'scatter',  # Specifies the plot type as scatter\n                  mode = 'lines+markers',  # Uses lines and markers for the plot\n                  name = country,  # Labels the plot with the country's name\n                  text = ~paste(\"Population:\", Population),  # Creates hover text showing population\n                  hoverinfo = 'text') %&gt;%  # Ensures hover info displays the text\n    layout(title = country,  # Sets the title of the plot to the country's name\n           xaxis = list(title = \"Year\"),  # Labels the x-axis\n           yaxis = list(title = \"Population\"),  # Labels the y-axis\n           showlegend = FALSE)  # Disables the legend for individual country plots\n\n  plots_list[[country]] &lt;- plot  # Adds the plot to the list using the country name as the key\n}\n\ncombined_plot &lt;- subplot(plots_list, nrows = 2, shareX = TRUE, titleX = TRUE, titleY = TRUE) %&gt;%\n  layout(title = \"Change in Population of Top 10 Countries Over Years\",  # Sets the main title for the combined plot\n         xaxis = list(title = \"Year\"),  # Labels the x-axis for the combined plot\n         yaxis = list(title = \"Population\"),  # Labels the y-axis for the combined plot\n         showlegend = TRUE)  # Enables the legend for the combined plot\n\ncombined_plot  # Displays the final combined plot of population changes"
  },
  {
    "objectID": "code.html#relationship-between-gun-ownership-and-suicide-rate",
    "href": "code.html#relationship-between-gun-ownership-and-suicide-rate",
    "title": "Codes",
    "section": "Relationship between Gun Ownership and Suicide Rate",
    "text": "Relationship between Gun Ownership and Suicide Rate\n\nCode for Redesign 1\n\nlibrary(ggplot2)  # Loads ggplot2\nlibrary(plotly)   # Loads plotly\nlibrary(dplyr)    # Loads dplyr\n\nBook1 &lt;- read.csv(\"Book1.csv\")  # Loads the data into a data frame\n\nBook1 &lt;- Book1 %&gt;%\n  rename(\n    State = State,  # Renames State column to State\n    Gun.Ownership.Rate = `Gun.Ownership.Rate....`,  # Renames gun ownership rate column\n    Suicidal.Rate.Per.100000 = `Suicidal.rate..per.100.000.`  # Renames suicidal rate column\n  )\n\nscatter_plot &lt;- ggplot(Book1, aes(x = Gun.Ownership.Rate, y = Suicidal.Rate.Per.100000, color = State)) +\n  geom_point(size = 3, alpha = 0.7) +  # Adds points for each state with specified size and transparency\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\", linetype = \"dashed\") +  # Adds a dashed regression line without confidence intervals\n  labs(title = \"Gun Ownership vs Suicidal Rate by State\",  # Sets the main title of the plot\n       x = \"Gun Ownership Rate (%)\",  # Labels the x-axis\n       y = \"Suicidal Rate\") +  # Labels the y-axis\n  theme(legend.position = \"none\")  # Hides the legend\n\ninteractive_plot &lt;- ggplotly(scatter_plot)  # Creates an interactive version of the scatter plot\n\ninteractive_plot  # Renders the interactive plot for user interaction\n\n\n\nCode for Redesign 2\n\nlibrary(reshape2)  # Loads reshape2\nlibrary(ggplot2)   # Loads ggplot2\n\nBook1 &lt;- read.csv(\"Book1.csv\")  # Loads the data into a data frame\n\nBook1 &lt;- Book1 %&gt;%\n  rename(\n    State = State,  # Renames State column to State\n    Gun.Ownership.Rate = `Gun.Ownership.Rate....`,  # Renames gun ownership rate column\n    Suicidal.Rate.Per.100000 = `Suicidal.rate..per.100.000.`  # Renames suicidal rate column\n  )\n\ndf_long &lt;- melt(Book1, id.vars = \"State\", measure.vars = c(\"Suicidal.Rate.Per.100000\", \"Gun.Ownership.Rate\"))  # Melts the data frame\n\ncolnames(df_long) &lt;- c(\"State\", \"Metric\", \"Value\")  # Updates column names\n\ndf_long$Metric &lt;- factor(df_long$Metric, levels = c(\"Gun.Ownership.Rate\", \"Suicidal.Rate.Per.100000\"))  # Sets order for plotting\n\ntotal_values &lt;- df_long %&gt;%\n  group_by(State) %&gt;%\n  summarise(Total = sum(Value, na.rm = TRUE))  # Summarizes total values by state, ignoring NAs\n\ndf_long &lt;- df_long %&gt;%\n  left_join(total_values, by = \"State\") %&gt;%\n  arrange(Total)  # Arranges data by total value in ascending order\n\nggplot(df_long, aes(x = reorder(State, Total), y = Value, fill = Metric)) +  # Initializes ggplot with specified aesthetics\n  geom_bar(stat = \"identity\", na.rm = TRUE) +  # Creates bars using the identity statistic, ignoring missing values\n  geom_text(aes(label = round(Value, 1)), position = position_stack(vjust = 0.5), size = 2, na.rm = TRUE) +  # Adds text labels inside the bars\n  scale_fill_manual(values = c(\"Suicidal.Rate.Per.100000\" = \"red\", \"Gun.Ownership.Rate\" = \"skyblue\"),  # Defines colors for the metrics\n                    labels = c(\"Suicidal.Rate.Per.100000\" = \"Suicidal Rate\",  # Custom legend labels\n                               \"Gun.Ownership.Rate\" = \"Gun Ownership Rate\")) +\n  labs(title = \"Stacked Bar Plot of Gun Ownership Rate and Suicidal Rate by State\",  # Sets the plot title\n       x = \"State\",  # Labels the x-axis\n       y = \"Rate\",  # Labels the y-axis\n       fill = \"Metric\") +  # Labels the fill legend\n  theme(axis.text.x = element_text(angle = 0, size = 8)) +  # Customizes x-axis text appearance\n  coord_flip()  # Flips the coordinates for better readability"
  },
  {
    "objectID": "code.html#presidential-debate",
    "href": "code.html#presidential-debate",
    "title": "Codes",
    "section": "Presidential Debate",
    "text": "Presidential Debate\n\nCode for Redesign\n\nlibrary(ggplot2)  # Loads ggplot2\nlibrary(tidyverse)  # Loads tidyverse\n\ndebatestats &lt;- read.csv(\"PDebate.csv\")  # Loads the data into a data frame\n\nlong_debatestats &lt;- debatestats %&gt;%\n  pivot_longer(cols = c(Trump, Biden),  # Specifies the columns to pivot\n               names_to = \"candidate\",  # New column to hold candidate names\n               values_to = \"score\")  # New column to hold the scores (time in minutes)\n\n ggplot(long_debatestats, aes(x = Topic, y = score, fill = candidate)) +  # Initializes ggplot with specified aesthetics\n  geom_bar(stat = \"identity\", position = \"stack\") +  # Creates stacked bars using the identity statistic\n  scale_fill_manual(values = c(\"Biden\" = \"blue\", \"Trump\" = \"red\")) +  # Defines colors for each candidate\n  geom_text(aes(label = score), position = position_stack(vjust = 0.5), color = \"white\") +  # Adds text labels showing the score inside the bars\n  labs(title = \"Debate Stats: Trump vs Biden by Topic\",  # Sets the plot title\n       x = \"Topic\",  # Labels the x-axis\n       y = \"Time (mins)\",  # Labels the y-axis indicating time in minutes\n       fill = \"Candidate\")  # Labels the fill legend for candidate colors"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Connect with Me",
    "section": "",
    "text": "As a data-driven professional with a strong background in Data Analytics and Electronics, I specialize in transforming complex data into actionable insights that drive strategic decision making. My experience spans across data analysis, financial markets and economic recession analysis, equipping me with a diverse skill set that bridges technical expertise with business acumen.\nMy hands-on experience with working with data has further refined my abilities in data visualization, financial modeling and database management. I am proficient in SQL, Python, Tableau and Excel, which I use to manage and analyze large datasets and create compelling data visualizations.\nI am passionate about using data to solve complex problems and uncover opportunities for growth. Whether working independently or as part of a team, I bring a collaborative spirit, a strong attention to detail and a commitment to delivering high-quality results. I am particularly interested in roles where I can apply my expertise to optimize processes, enhance performance and contribute to data-driven innovation. If you’re looking for a professional who can not only analyze data but also translate it into meaningful strategies, I would love to connect and explore potential opportunities."
  },
  {
    "objectID": "index.html#about",
    "href": "index.html#about",
    "title": "Connect with Me",
    "section": "",
    "text": "As a data-driven professional with a strong background in Data Analytics and Electronics, I specialize in transforming complex data into actionable insights that drive strategic decision making. My experience spans across data analysis, financial markets and economic recession analysis, equipping me with a diverse skill set that bridges technical expertise with business acumen.\nMy hands-on experience with working with data has further refined my abilities in data visualization, financial modeling and database management. I am proficient in SQL, Python, Tableau and Excel, which I use to manage and analyze large datasets and create compelling data visualizations.\nI am passionate about using data to solve complex problems and uncover opportunities for growth. Whether working independently or as part of a team, I bring a collaborative spirit, a strong attention to detail and a commitment to delivering high-quality results. I am particularly interested in roles where I can apply my expertise to optimize processes, enhance performance and contribute to data-driven innovation. If you’re looking for a professional who can not only analyze data but also translate it into meaningful strategies, I would love to connect and explore potential opportunities."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Connect with Me",
    "section": "Education",
    "text": "Education\nGeorge Mason University | Fairfax, VA\nM.S. Data Analytics Engineering | May 2026\nUniversity of Mumbai | Mumbai, India\nB.E. Electronics and Data Science | May 2024"
  },
  {
    "objectID": "portfolio.html#population-in-one-chart",
    "href": "portfolio.html#population-in-one-chart",
    "title": "portfolio",
    "section": "Population in One Chart",
    "text": "Population in One Chart\n\n\nSource: https://www.visualcapitalist.com/worlds-7-5-billion-people-chart/\n\n\nIn this Treemap, the population of all countries is represented, with countries of the same contitnent stacked together. This visualization makes it easy to see at a glance how countries stack up against each other and how they cluster by continent. However, while treemaps can be striking, when there are many countries, important details might get lost in the colorful chaos, making it harder to spot trends or connections. So, while treemaps can be a fun way to present data, it’s important to think about whether they really tell the story we want to share. Also, countries with smaller populations are difficult to to find in this visualization."
  },
  {
    "objectID": "portfolio.html#redesign-1",
    "href": "portfolio.html#redesign-1",
    "title": "portfolio",
    "section": "Redesign 1",
    "text": "Redesign 1\n\n\n\n\n\n\n\nThis redesign has an interactive choropleth map which visually represents the population of countries worldwide. Each country is colored according to its population size, ranging from light blue for lower populations to dark blue for higher populations. When users hover over a country, they can see detailed information, including the country’s name, capital, total population and its percentage of the global population. The map features a clean layout, providing a clear and engaging overview of global population distribution."
  },
  {
    "objectID": "portfolio.html#redesign-2",
    "href": "portfolio.html#redesign-2",
    "title": "portfolio",
    "section": "Redesign 2",
    "text": "Redesign 2\n\n\n\n\n\n\n\nFrom the same dataset, we can also redesign it as an interactive line plot displaying the population trends of the top ten countries based on populations. Each line represents a different country, showing how its population has changed. We can hover over the lines to see specific population values for each year, enhancing the data’s accessibility. The subplot format allows for easy comparison between countries, highlighting variations in population growth trends across the top ten nations."
  },
  {
    "objectID": "portfolio.html#relationship-between-gun-ownership-and-suicide-rate",
    "href": "portfolio.html#relationship-between-gun-ownership-and-suicide-rate",
    "title": "portfolio",
    "section": "Relationship between Gun Ownership and Suicide Rate",
    "text": "Relationship between Gun Ownership and Suicide Rate\n\n\nSource: https://www.washingtonpost.com/graphics/business/wonkblog/suicide-rates/\n\n\nIn the article, these two map plots were used to show the relationship between gun ownership and suicide rates in those states. The main disadvantage of using two maps is that we can establish a visual relationship between those two factors. Only the states with extremely high gun ownership and suicide rates like Alaska, New Mexico and Wyoming can be differrentiated from the others. Therefore a redesign which has both factors can be helpful to establish the relationship they have proved with their methodology in the article."
  },
  {
    "objectID": "portfolio.html#redesign-1-1",
    "href": "portfolio.html#redesign-1-1",
    "title": "portfolio",
    "section": "Redesign 1",
    "text": "Redesign 1\n\n\n\n\n\n\n\nThis redesign is an interactive scatter plot that visualizes the relationship between gun ownership rates and suicidal rates across different states. Each point represents a state, with its position determined by the respective gun ownership and suicidal rates. The regression line indicates the overall trend, helping to highlight any correlation between the two variables. We can hover over individual points to gain insights into specific states, enhancing their understanding of the data."
  },
  {
    "objectID": "portfolio.html#redesign-2-1",
    "href": "portfolio.html#redesign-2-1",
    "title": "portfolio",
    "section": "Redesign 2",
    "text": "Redesign 2\n\n\n\n\n\n\n\n\n\n\nThis redesign is a stacked bar plot that visually compares gun ownership rates and suicidal rates across different states. Each bar is color-coded, with red representing the suicidal rate and sky blue for gun ownership, allowing for an immediate understanding of the data. The plot is arranged in descending order based on the total values, making it easy to identify states with lower and higher combined rates. Also, numeric labels on the bars provide precise values, making the information more accessible to viewers."
  },
  {
    "objectID": "portfolio.html#presidential-debate",
    "href": "portfolio.html#presidential-debate",
    "title": "portfolio",
    "section": "Presidential Debate",
    "text": "Presidential Debate\n\n\nSource: https://www.nbcnews.com/politics/2024-election/trump-biden-first-presidential-debate-topics-attacks-live-tracking-rcna158618\n\n\nIn this article, a bubble chart is utilized to illustrate the speaking time of each presidential candidate on various issues. While this format can be engaging, it may also overwhelm viewers with complexity. Sometimes a straightforward bar chart might provide a clearer comparison of each candidate’s speaking time across issues, enhancing the overall understanding of their priorities."
  },
  {
    "objectID": "portfolio.html#redesign",
    "href": "portfolio.html#redesign",
    "title": "portfolio",
    "section": "Redesign",
    "text": "Redesign\n\n\n\n\n\n\n\n\n\n\nThis redesign is a stacked bar chart comparing the speaking times of presidential candidates Trump and Biden across various debate topics. Each bar represents a specific topic, with the sections colored according to the candidate i.e. blue for Biden and red for Trump. This visualization effectively highlights the candidate’s focus areas during the debate, allowing viewers to quickly discern where each candidate invested their speaking time."
  }
]